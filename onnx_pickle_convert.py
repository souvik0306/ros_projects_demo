#!/usr/bin/env python3
"""Convert ONNX inference pickle to the format expected by evaluate_state.py."""
import argparse
import pickle
import torch


def convert(infile: str, seq: str, outfile: str) -> None:
    """Load ``infile`` and write evaluation-ready pickle to ``outfile``.

    Parameters
    ----------
    infile: str
        Path to the pickle produced by ONNX inference. It may contain a
        list of segment dictionaries (as generated by ``inference_ros``)
        or a mapping from sequence names to tensors.
    seq: str
        Name of the sequence. Required when ``infile`` stores a list of
        segments; ignored if the file already uses sequence keys.
    outfile: str
        Destination pickle file compatible with ``evaluate_state.py``.
    """
    with open(infile, "rb") as f:
        data = pickle.load(f)

    # If data is already a dict keyed by sequence name, simply ensure all
    # values are tensors and save.
    if isinstance(data, dict):
        out = {}
        for name, d in data.items():
            out[name] = {k: (v if isinstance(v, torch.Tensor)
                               else torch.as_tensor(v, dtype=torch.float64))
                         for k, v in d.items()}
            # provide zero covariances if missing
            if "acc_cov" not in out[name]:
                out[name]["acc_cov"] = torch.zeros_like(out[name]["correction_acc"])
            if "gyro_cov" not in out[name]:
                out[name]["gyro_cov"] = torch.zeros_like(out[name]["correction_gyro"])
    else:
        # assume list of chunks; concatenate along time dimension
        accum = {}
        for chunk in data:
            for k, v in chunk.items():
                v_t = torch.as_tensor(v, dtype=torch.float64)
                accum.setdefault(k, []).append(v_t)
        merged = {k: torch.cat(vs, dim=0) for k, vs in accum.items()}
        merged.setdefault("acc_cov", torch.zeros_like(merged["correction_acc"]))
        merged.setdefault("gyro_cov", torch.zeros_like(merged["correction_gyro"]))
        out = {seq: merged}

    with open(outfile, "wb") as f:
        pickle.dump(out, f, protocol=pickle.HIGHEST_PROTOCOL)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert ONNX output to evaluation format")
    parser.add_argument("infile", help="Input pickle from ONNX inference")
    parser.add_argument("seq", help="Sequence name for evaluation")
    parser.add_argument("outfile", help="Destination pickle path")
    args = parser.parse_args()
    convert(args.infile, args.seq, args.outfile)